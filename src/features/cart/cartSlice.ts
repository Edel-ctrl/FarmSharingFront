// üìÅ src/store/slices/cartSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Offer } from '../../types/offer';

interface CartItem {
    offer: Offer;      // üõí –¢–æ–≤–∞—Ä
    quantity: number;  // üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
}

interface CartState {
    items: CartItem[];           // üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    totalAmount: number;         // üí∞ –û–±—â–∞—è —Å—É–º–º–∞
    totalQuantity: number;       // üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
}

const initialState: CartState = {
    items: [],
    totalAmount: 0,
    totalQuantity: 0,
};

const cartSlice = createSlice({
    name: 'cart',
    initialState,
    reducers: {
        // ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        addToCart: (state, action: PayloadAction<Offer>) => {
            const offer = action.payload;
            const existingItem = state.items.find(item => item.offer.id === offer.id);

            if (existingItem) {
                // üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å
                existingItem.quantity++;
            } else {
                // üÜï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                state.items.push({ offer, quantity: 1 });
            }

            // üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
            cartSlice.caseReducers.calculateTotals(state);
        },

        // ‚ûñ –£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        removeFromCart: (state, action: PayloadAction<number>) => {
            const offerId = action.payload;
            state.items = state.items.filter(item => item.offer.id !== offerId);
            cartSlice.caseReducers.calculateTotals(state);
        },

        // üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–∏
        calculateTotals: (state) => {
            state.totalQuantity = state.items.reduce((total, item) => total + item.quantity, 0);
            state.totalAmount = state.items.reduce((total, item) => total + (item.offer.price * item.quantity), 0);
        },

        // üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        clearCart: (state) => {
            state.items = [];
            state.totalAmount = 0;
            state.totalQuantity = 0;
        },
    },
});

export const { addToCart, removeFromCart, calculateTotals, clearCart } = cartSlice.actions;
export default cartSlice.reducer;
